package app

import (
	"github.com/mikeschinkel/gerardus/fi"
	"github.com/mikeschinkel/gerardus/logger"
	"github.com/mikeschinkel/gerardus/persister"
)

// THis file is designed to be ultimately be able to be generated by a go:generate CLI tool

type FI struct {
	fi.FI
	Persister PersisterFI
	Logger    LoggerFI
}

type PersisterFI struct {
	fi.FI
	InitializeFunc            func(Context, string, ...any) (persister.DataStore, error)
	RequestGitHubRepoInfoFunc func(string) (*persister.RepoInfo, error)
}

func (fi PersisterFI) Initialize(ctx Context, s string, args ...any) (persister.DataStore, error) {
	return fi.InitializeFunc(ctx, s, args...)
}
func (fi PersisterFI) RepoInfoRequester(url string) (info *persister.RepoInfo, err error) {
	return fi.RequestGitHubRepoInfoFunc(url)
}

type LoggerFI struct {
	fi.FI
	InitializeFunc func(logger.Params) error
}

func (fi LoggerFI) Initialize(p logger.Params) error {
	return fi.InitializeFunc(p)
}

func AssignFI(ctx Context, new FI) FI {
	injector := fi.GetFI[FI](ctx)
	if injector.Logger.InitializeFunc == nil {
		injector.Logger.InitializeFunc = new.Logger.InitializeFunc
	}
	if injector.Persister.InitializeFunc == nil {
		injector.Persister.InitializeFunc = new.Persister.InitializeFunc
	}
	if injector.Persister.RequestGitHubRepoInfoFunc == nil {
		injector.Persister.RequestGitHubRepoInfoFunc = new.Persister.RequestGitHubRepoInfoFunc
	}
	return injector
}
