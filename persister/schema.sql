
CREATE TABLE IF NOT EXISTS project
(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    name TEXT COLLATE RTRIM NOT NULL,
    repo_url TEXT COLLATE RTRIM NOT NULL,
    about TEXT COLLATE RTRIM NOT NULL,
    website TEXT COLLATE RTRIM NOT NULL,
    UNIQUE (name) ON CONFLICT FAIL,
    UNIQUE (repo_url) ON CONFLICT FAIL,
    UNIQUE (about) ON CONFLICT FAIL,
    UNIQUE (website) ON CONFLICT FAIL
);

CREATE TABLE IF NOT EXISTS codebase
(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    project_id INTEGER NOT NULL ON CONFLICT FAIL,
    version_tag TEXT COLLATE RTRIM NOT NULL,
    source_url TEXT COLLATE RTRIM NOT NULL,
    UNIQUE (project_id,version_tag) ON CONFLICT FAIL,
    UNIQUE (source_url) ON CONFLICT FAIL
);

CREATE TABLE IF NOT EXISTS survey
(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ON CONFLICT FAIL,
    codebase_id INTEGER NOT NULL ON CONFLICT FAIL,
    local_dir TEXT COLLATE RTRIM NOT NULL ON CONFLICT FAIL,
    timestamp TEXT DEFAULT CURRENT_TIMESTAMP NOT NULL ON CONFLICT FAIL,
    FOREIGN KEY (codebase_id) REFERENCES codebase(id) ON DELETE NO ACTION ON UPDATE NO ACTION
);

DROP VIEW IF EXISTS survey_view;
CREATE VIEW survey_view AS
SELECT
    sv.id,
    p.name as project,
    sv.codebase_id,
    cb.project_id,
    p.repo_url,
    cb.version_tag,
    cb.source_url,
    sv.local_dir,
    sv.timestamp
FROM survey AS sv
         JOIN codebase cb ON cb.id=sv.codebase_id
         JOIN project p ON p.id=cb.project_id;


CREATE TABLE IF NOT EXISTS file
(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ON CONFLICT FAIL,
    survey_id INTEGER NOT NULL ON CONFLICT FAIL,
    filepath TEXT COLLATE RTRIM NOT NULL ON CONFLICT FAIL,
    UNIQUE (survey_id,filepath) ON CONFLICT FAIL,
    FOREIGN KEY (survey_id) REFERENCES survey(id) ON DELETE CASCADE ON UPDATE NO ACTION

);

CREATE TABLE IF NOT EXISTS symbol_type
(
    id INTEGER PRIMARY KEY NOT NULL ON CONFLICT FAIL,
    name TEXT COLLATE RTRIM NOT NULL ON CONFLICT FAIL
);

CREATE TABLE IF NOT EXISTS type
(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ON CONFLICT FAIL,
    file_id INTEGER NOT NULL ON CONFLICT FAIL,
    survey_id INTEGER NOT NULL ON CONFLICT FAIL,
    symbol_type_id INTEGER NOT NULL ON CONFLICT FAIL,
    name TEXT COLLATE RTRIM NOT NULL ON CONFLICT FAIL,
    definition TEXT COLLATE RTRIM NOT NULL ON CONFLICT FAIL,
    FOREIGN KEY (file_id) REFERENCES file(id) ON DELETE CASCADE ON UPDATE NO ACTION,
    FOREIGN KEY (survey_id) REFERENCES survey(id) ON DELETE CASCADE ON UPDATE NO ACTION,
    FOREIGN KEY (symbol_type_id) REFERENCES symbol_type(id) ON DELETE NO ACTION ON UPDATE NO ACTION
);

DROP VIEW IF EXISTS type_view;
CREATE VIEW type_view AS
SELECT t.id,
       p.name AS project,
       f.filepath,
       t.name,
       st.name AS symbol_name,
       t.survey_id,
       t.file_id,
       t.symbol_type_id,
       sv.codebase_id,
       t.definition,
       sv.timestamp,
       cb.source_url,
       p.repo_url,
       p.about AS about_project,
       sv.local_dir
FROM type t
    JOIN file f ON f.id=t.file_id
    JOIN survey sv ON sv.id=t.survey_id
    JOIN symbol_type st ON st.id=t.symbol_type_id
    JOIN codebase cb ON cb.id=sv.codebase_id
    JOIN project p ON p.id=cb.project_id
WHERE 1=1
ORDER BY t.survey_id,t.file_id,t.symbol_type_id,t.name;

CREATE TABLE IF NOT EXISTS package_type
(
    id INTEGER PRIMARY KEY NOT NULL ON CONFLICT FAIL,
    name TEXT COLLATE RTRIM NOT NULL ON CONFLICT FAIL
);


CREATE TABLE IF NOT EXISTS package
(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ON CONFLICT FAIL,
    import_path TEXT COLLATE RTRIM NOT NULL ON CONFLICT FAIL,
    source TEXT COLLATE RTRIM NOT NULL ON CONFLICT FAIL,
    type_id INTEGER COLLATE RTRIM NOT NULL ON CONFLICT FAIL,
    name AS (substr(replace("#"||json_extract('["'||replace(import_path,'/','","')||'"]','$[#-1]'),"#go-","#"),2)),
    FOREIGN KEY (type_id) REFERENCES package_type(id) ON DELETE CASCADE ON UPDATE NO ACTION,
    UNIQUE (import_path,source) ON CONFLICT FAIL
);

CREATE TABLE IF NOT EXISTS package_version
(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ON CONFLICT FAIL,
    package_id INTEGER COLLATE RTRIM NOT NULL ON CONFLICT FAIL,
    version TEXT COLLATE RTRIM NOT NULL ON CONFLICT FAIL,
    source_url TEXT COLLATE RTRIM NOT NULL ON CONFLICT FAIL,
    FOREIGN KEY (package_id) REFERENCES package(id) ON DELETE CASCADE ON UPDATE NO ACTION,
    UNIQUE (package_id,version) ON CONFLICT FAIL
);

CREATE TABLE IF NOT EXISTS import
(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ON CONFLICT FAIL,
    file_id INTEGER NOT NULL ON CONFLICT FAIL,
    survey_id INTEGER NOT NULL ON CONFLICT FAIL,
    package_id INTEGER NOT NULL ON CONFLICT FAIL,
    alias TEXT COLLATE RTRIM NOT NULL ON CONFLICT FAIL,
    UNIQUE (file_id,survey_id,package_id,alias) ON CONFLICT FAIL,
    FOREIGN KEY (file_id) REFERENCES file(id) ON DELETE CASCADE ON UPDATE NO ACTION,
    FOREIGN KEY (survey_id) REFERENCES survey(id) ON DELETE CASCADE ON UPDATE NO ACTION,
    FOREIGN KEY (package_id) REFERENCES survey(id) ON DELETE CASCADE ON UPDATE NO ACTION
);

CREATE TABLE IF NOT EXISTS variable
(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ON CONFLICT FAIL,
    name TEXT COLLATE RTRIM NOT NULL ON CONFLICT FAIL,
    survey_id INTEGER NOT NULL ON CONFLICT FAIL,
    type_id INTEGER NOT NULL ON CONFLICT FAIL,
    usage INTEGER NOT NULL ON CONFLICT FAIL,
    is_param AS (CASE WHEN usage = 1 THEN 1 ELSE 0 END),
    is_result AS (CASE WHEN usage = 2 THEN 1 ELSE 0 END),
    FOREIGN KEY (type_id) REFERENCES type(id) ON DELETE CASCADE ON UPDATE NO ACTION
);

CREATE TABLE IF NOT EXISTS method
(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ON CONFLICT FAIL,
    name TEXT COLLATE RTRIM NOT NULL ON CONFLICT FAIL,
    params TEXT COLLATE RTRIM NOT NULL ON CONFLICT FAIL,
    results TEXT COLLATE RTRIM NOT NULL ON CONFLICT FAIL,
    file_id INTEGER NOT NULL ON CONFLICT FAIL,
    survey_id INTEGER NOT NULL ON CONFLICT FAIL,
    type_id INTEGER NOT NULL ON CONFLICT FAIL,
    FOREIGN KEY (file_id) REFERENCES file(id) ON DELETE CASCADE ON UPDATE NO ACTION,
    FOREIGN KEY (survey_id) REFERENCES survey(id) ON DELETE CASCADE ON UPDATE NO ACTION,
    FOREIGN KEY (type_id) REFERENCES type(id) ON DELETE CASCADE ON UPDATE NO ACTION
);

CREATE TABLE IF NOT EXISTS category
(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ON CONFLICT FAIL,
    survey_id INTEGER NOT NULL ON CONFLICT FAIL,
    name TEXT COLLATE RTRIM NOT NULL ON CONFLICT FAIL,
    UNIQUE (survey_id,name) ON CONFLICT FAIL,
    FOREIGN KEY (survey_id) REFERENCES survey(id) ON DELETE CASCADE ON UPDATE NO ACTION
);

CREATE TABLE IF NOT EXISTS category_type
(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ON CONFLICT FAIL,
    name TEXT COLLATE RTRIM NOT NULL ON CONFLICT FAIL,
    category_id INTEGER NOT NULL ON CONFLICT FAIL,
    survey_id INTEGER NOT NULL ON CONFLICT FAIL,
    type_id INTEGER NOT NULL ON CONFLICT FAIL,
    FOREIGN KEY (category_id) REFERENCES type(id) ON DELETE CASCADE ON UPDATE NO ACTION,
    FOREIGN KEY (survey_id) REFERENCES survey(id) ON DELETE CASCADE ON UPDATE NO ACTION,
    FOREIGN KEY (type_id) REFERENCES type(id) ON DELETE CASCADE ON UPDATE NO ACTION
);

CREATE TABLE IF NOT EXISTS module
(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ON CONFLICT FAIL,
    name TEXT COLLATE RTRIM NOT NULL ON CONFLICT FAIL,
    UNIQUE (name) ON CONFLICT FAIL
);

CREATE TABLE IF NOT EXISTS module_version
(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ON CONFLICT FAIL,
    module_id INTEGER NOT NULL ON CONFLICT FAIL,
    version TEXT COLLATE RTRIM NOT NULL ON CONFLICT FAIL,
    FOREIGN KEY (module_id) REFERENCES type(id) ON DELETE CASCADE ON UPDATE NO ACTION,
    UNIQUE (module_id,version) ON CONFLICT FAIL
);

DROP VIEW IF EXISTS module_version_view;

CREATE VIEW module_version_view AS
    SELECT
        mv.id,
        mv.module_id,
        m.name,
        mv.version
    FROM module_version mv
         JOIN module m ON m.id=mv.module_id;

CREATE TABLE IF NOT EXISTS survey_module
(
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ON CONFLICT FAIL,
    survey_id INTEGER NOT NULL ON CONFLICT FAIL,
    module_id INTEGER NOT NULL ON CONFLICT FAIL,
    module_version_id INTEGER NOT NULL ON CONFLICT FAIL,
    package_id INTEGER NOT NULL ON CONFLICT FAIL,
    file_id INTEGER NOT NULL ON CONFLICT FAIL,
    FOREIGN KEY (survey_id) REFERENCES type(id) ON DELETE CASCADE ON UPDATE NO ACTION,
    FOREIGN KEY (module_id) REFERENCES type(id) ON DELETE CASCADE ON UPDATE NO ACTION,
    FOREIGN KEY (module_version_id) REFERENCES type(id) ON DELETE CASCADE ON UPDATE NO ACTION,
    FOREIGN KEY (file_id) REFERENCES type(id) ON DELETE CASCADE ON UPDATE NO ACTION,
    UNIQUE (survey_id,module_version_id,file_id) ON CONFLICT FAIL
);


